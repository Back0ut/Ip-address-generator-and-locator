import os
from random import randint

from flask import Flask, jsonify, render_template_string
from requests import get

ips = []
app = Flask(__name__)

class GenerateIp:
    def __init__(self) -> None:
        self.ip = self.GenerateNewIp()
        self.city, self.country = self.GetGeolocation(self.ip)
        
        ips.append(self.ip)

    def GenerateNewIp(self) -> str:
        while True:
            ip_parts = []
            
            for _ in range(4):
                rand_num = randint(0, 2)
                
                ip_parts.append(str(randint(0, 255))) if rand_num == 0 else \
                ip_parts.append(str(randint(0, 99))) if rand_num == 1 else ip_parts.append(str(randint(0, 9)))
            
            new_ip = '.'.join(ip_parts)
            
            if new_ip not in ips:
                return new_ip
            
            else:
                self.GenerateNewIp

    def GetGeolocation(self, ip: str) -> tuple[str, str]:
        try:
            response = get(f'http://ipinfo.io/{ip}/json')
            data = response.json()
            return data.get('city', 'Unknown'), data.get('country', 'Unknown')
        
        except Exception:
            self.GenerateNewIp

@app.route('/')
def index():
    template_path = os.path.join('C:/Users/ABC/Desktop/VsCode Projects/Python Projects/Ip-Address-Generator-locator', 'weather_template.html')

    try:
        with open(template_path, 'r') as file:
            template = file.read()
    
    except FileNotFoundError:
        return 'Error: Template file not found', 500
    
    return render_template_string(template)

@app.route('/generate_ips')
def generate_ips():
    ip_addresses = []
    
    for _ in range(randint(5, 10)):
        new_ip = GenerateIp()
        ip_addresses.append({'ip': new_ip.ip, 'city': new_ip.city, 'country': new_ip.country})
    
    return jsonify(ip_addresses)

if __name__ == '__main__':
    app.run(debug=True, port=5000)
